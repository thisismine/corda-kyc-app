package com.capgemini.kycapp.flow;

import co.paralleluniverse.fibers.Suspendable;
import com.capgemini.kycapp.contract.KycState;
import com.google.common.collect.Sets;
import net.corda.core.crypto.CompositeKey;
import net.corda.core.crypto.CryptoUtilities;
import net.corda.core.crypto.DigitalSignature;
import net.corda.core.crypto.Party;
import net.corda.core.flows.FlowLogic;
import net.corda.core.transactions.SignedTransaction;
import net.corda.core.transactions.TransactionBuilder;
import net.corda.core.transactions.WireTransaction;
import net.corda.core.utilities.ProgressTracker;
import net.corda.flows.FinalityFlow;
import com.google.common.collect.ImmutableSet;


import java.security.KeyPair;
import java.time.Duration;
import java.time.Instant;
import java.util.*;

import static kotlin.collections.CollectionsKt.single;

public class ExampleFlow
{
    public static class Initiator extends FlowLogic<ExampleFlowResult>
    {
        private final KycState kycState;
        private final List<Party> otherParties;
        private net.corda.core.crypto.SecureHash.SHA256 attachmentHashValue;
        // The progress tracker checkpoints each stage of the flow and outputs the specified messages when each
        // checkpoint is reached in the code. See the 'progressTracker.currentStep' expressions within the call()
        // function.
        private final ProgressTracker progressTracker = new ProgressTracker(
                CONSTRUCTING_OFFER,
                SENDING_OFFER_AND_RECEIVING_PARTIAL_TRANSACTION,
                VERIFYING,
                SIGNING,
                NOTARY,
                RECORDING,
                SENDING_FINAL_TRANSACTION
        );

        private static final ProgressTracker.Step CONSTRUCTING_OFFER = new ProgressTracker.Step(
                "Constructing proposed purchase order.");
        private static final ProgressTracker.Step SENDING_OFFER_AND_RECEIVING_PARTIAL_TRANSACTION = new ProgressTracker.Step(
                "Sending purchase order to seller for review, and receiving partially signed transaction from seller in return.");
        private static final ProgressTracker.Step VERIFYING = new ProgressTracker.Step(
                "Verifying signatures and contract constraints.");
        private static final ProgressTracker.Step SIGNING = new ProgressTracker.Step(
                "Signing transaction with our private key.");
        private static final ProgressTracker.Step NOTARY = new ProgressTracker.Step(
                "Obtaining notary signature.");
        private static final ProgressTracker.Step RECORDING = new ProgressTracker.Step(
                "Recording transaction in vault.");
        private static final ProgressTracker.Step SENDING_FINAL_TRANSACTION = new ProgressTracker.Step(
                "Sending fully signed transaction to seller.");

        public Initiator(KycState kycState, List<Party> otherParties, net.corda.core.crypto.SecureHash.SHA256 attachmentHashValue) {
            this.kycState = kycState;
            this.otherParties = otherParties;
            this.attachmentHashValue = attachmentHashValue;
        }

        @Override
        public ProgressTracker getProgressTracker()
        {
            return progressTracker;
        }

        /**
         * The flow logic is encapsulated within the call() method.
         */
        @Suspendable
        @Override
        public ExampleFlowResult call()
        {
            // Naively, wrapped the whole flow in a try ... catch block so we can
            // push the exceptions back through the web API.
            try {

                final KeyPair myKeyPair = getServiceHub().getLegalIdentityKey();
                // Obtain a reference to the notary we want to use and its public key.
                final Party notary = single(getServiceHub().getNetworkMapCache().getNotaryNodes()).getNotaryIdentity();
                final CompositeKey notaryPubKey = notary.getOwningKey();
                
                /** Add attachment logic - START */              
                
                Class memberClasses[] = TransactionType.General.class.getDeclaredClasses();     	
            	Class classDefinition = memberClasses[0];    	
            	TransactionBuilder builder = null;
            	try{
            		Constructor cons = classDefinition.getConstructor(Party.class);    		
            		Object obj = cons.newInstance(otherParty);    		
            		builder = (TransactionBuilder) obj;   		
            	}catch(Exception e){
            		e.printStackTrace();
            	}             	
            	builder.addAttachment(attachmentHashValue);
            	builder.signWith(net.corda.testing.CoreTestUtils.getALICE_KEY());            	
            	SignedTransaction stx = builder.toSignedTransaction(true);
            	
            	System.out.println("Sending attachment......"+stx.getId());             	
            	
            	final Set<Party> participants = ImmutableSet.of(otherParty);		        
		        subFlow(new BroadcastTransactionFlow(stx, participants),false);  	
            	
                /** Add attachment logic - END */

                final TransactionBuilder utx = kycState.generateAgreement(notary);

                final Instant currentTime = getServiceHub().getClock().instant();
                utx.setTime(currentTime, Duration.ofSeconds(30));

                SignedTransaction ptxWithA = utx.signWith(myKeyPair).toSignedTransaction(false);

                SignedTransaction signWithB = null;
                Set<Party> participants = new HashSet<>();
                for ( Party otherParty : otherParties )
                {
                    signWithB = this.sendAndReceive(SignedTransaction.class, otherParty , ptxWithA)
                            .unwrap(data -> data);

                    List<CompositeKey> tpkeys = getKeys(otherParty,otherParties);
                    tpkeys.add(notaryPubKey);
                    CompositeKey[] array = new CompositeKey[tpkeys.size()];

                    final WireTransaction wtxWithB = signWithB.verifySignatures(tpkeys.toArray(array));
                    wtxWithB.toLedgerTransaction(getServiceHub()).verify();

                    ptxWithA = signWithB;
                    participants.add(otherParty);
                }

                participants.add(getServiceHub().getMyInfo().getLegalIdentity());

                // FinalityFlow() notarises the transaction and records it in each party's vault.
                subFlow(new FinalityFlow(signWithB, participants),false);

                return new ExampleFlowResult.Success(String.format("Transaction id %s committed to ledger.", signWithB.getId()));

            } catch(Exception ex) {
                // Just catch all exception types.
                return new ExampleFlowResult.Failure(ex.getMessage());
            }
        }
    }

    public static List<CompositeKey> getKeys(Party otherParty,List<Party> otherParties)
    {
        List<CompositeKey> allowedToBeMissingKeysList = new ArrayList<>();
        for (Party tempParty : otherParties)
        {
            if(!tempParty.equals(otherParty))
            {
                allowedToBeMissingKeysList.add(tempParty.getOwningKey());
            }
        }
        return allowedToBeMissingKeysList;
    }

    public static class Acceptor extends FlowLogic<ExampleFlowResult>
    {

        private final Party otherParty;
        private final ProgressTracker progressTracker = new ProgressTracker(
                WAIT_FOR_AND_RECEIVE_PROPOSAL,
                GENERATING_TRANSACTION,
                SIGNING,
                SEND_TRANSACTION_AND_WAIT_FOR_RESPONSE,
                VERIFYING_TRANSACTION,
                RECORDING
        );

        private static final ProgressTracker.Step WAIT_FOR_AND_RECEIVE_PROPOSAL = new ProgressTracker.Step(
                "Receiving proposed purchase order from buyer.");
        private static final ProgressTracker.Step GENERATING_TRANSACTION = new ProgressTracker.Step(
                "Generating transaction based on proposed purchase order.");
        private static final ProgressTracker.Step SIGNING = new ProgressTracker.Step(
                "Signing proposed transaction with our private key.");
        private static final ProgressTracker.Step SEND_TRANSACTION_AND_WAIT_FOR_RESPONSE = new ProgressTracker.Step(
                "Sending partially signed transaction to buyer and wait for a response.");
        private static final ProgressTracker.Step VERIFYING_TRANSACTION = new ProgressTracker.Step(
                "Verifying signatures and contract constraints.");
        private static final ProgressTracker.Step RECORDING = new ProgressTracker.Step(
                "Recording transaction in vault.");

        public Acceptor(Party otherParty)
        {
            this.otherParty = otherParty;
        }

        @Override
        public ProgressTracker getProgressTracker()
        { return progressTracker; }

        @Suspendable
        @Override
        public ExampleFlowResult call()
        {
            try {
                // Prep.
                // Obtain a reference to our key pair.
                final KeyPair keyPair = getServiceHub().getLegalIdentityKey();

                // Obtain a reference to the notary we want to use and its public key.
                final Party notary = single(getServiceHub().getNetworkMapCache().getNotaryNodes()).getNotaryIdentity();
                final CompositeKey notaryPubKey = notary.getOwningKey();

                final Party ig1 = getServiceHub().getIdentityService().partyFromKey(CryptoUtilities.getComposite(keyPair.getPublic()));

                Iterable<Party> allParties = getServiceHub().getIdentityService().getAllIdentities();
                Iterator itr = allParties.iterator();

                Party toIgnore =null;
                List<Party> partiesToIgnore = new ArrayList<>();
                while(itr.hasNext()) {
                    Party element = (Party)itr.next();
                    if(element!=null && !(element.getName().equalsIgnoreCase("NetworkMapService"))
                            && !(element.getName().equalsIgnoreCase("Controller"))
                            && !(element.getName().equalsIgnoreCase(otherParty.getName()))
                            && !(element.getName().equalsIgnoreCase(ig1.getName()) ))
                    {
                        partiesToIgnore.add(element);
                    }
                }

                List<CompositeKey> tpkeys = getKeys(otherParty,partiesToIgnore);
                tpkeys.add(notaryPubKey);
                tpkeys.add(CryptoUtilities.getComposite(keyPair.getPublic()));
                CompositeKey[] array = new CompositeKey[tpkeys.size()];

                final SignedTransaction utx = this.receive(SignedTransaction.class, otherParty).unwrap(data -> data );

                final WireTransaction wtx ;
                wtx = utx.verifySignatures(tpkeys.toArray(array));
                wtx.toLedgerTransaction(getServiceHub()).verify();

                final DigitalSignature.WithKey mySig = CryptoUtilities.signWithECDSA(keyPair, utx.getTx().getId().getBytes());
                final SignedTransaction vtx = utx.plus(mySig);

                this.send(otherParty, vtx);

                return new ExampleFlowResult.Success(String.format("Signed And Sent Back"));

            } catch (Exception ex) {
                return new ExampleFlowResult.Failure(ex.getMessage());
            }
        }
    }



    public static class ExampleFlowResult {
        public static class Success extends ExampleFlow.ExampleFlowResult {
            private String message;

            private Success(String message) { this.message = message; }

            @Override
            public String toString() { return String.format("Success(%s)", message); }
        }

        public static class Failure extends ExampleFlow.ExampleFlowResult {
            private String message;

            private Failure(String message) { this.message = message; }

            @Override
            public String toString() { return String.format("Failure(%s)", message); }
        }
    }
}
